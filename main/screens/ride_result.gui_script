local monarch = require "monarch.monarch"
local druid = require "druid.druid"
local route_service = require "main.model.route"
local ride_service = require "main.model.ride"
local cyclist_service = require "main.model.cyclist"

local function show_stars(self, result)
    local rating = tonumber(string.format("%.1f", (result.fun * 5) / 100))
    if rating < 0 then
        rating = 0
    end

    for i = 1, 5 do
        if i <= rating then
            gui.play_flipbook(gui.get_node("icon_star" .. i), hash("star"))
        elseif rating < i and rating > i - 1 then
            gui.play_flipbook(gui.get_node("icon_star" .. i), hash("star_half"))
        else
            gui.play_flipbook(gui.get_node("icon_star" .. i), hash("star_empty"))
        end
    end

    gui.set_text(gui.get_node("text_result"), string.format("%s/5", rating))
end

local function show_all_results(self)
    gui.set_enabled(gui.get_node("icon_frame"), false)
    gui.set_enabled(gui.get_node("panel_stars"), false)
    

    for index, result in pairs(ride_service.results) do
        show_stars(self, result)
        local stars = gui.clone_tree(gui.get_node("panel_stars"))
        local pos = gui.get_position(stars["panel_stars"])
        pos.y = pos.y - 90 * (index - 1)
        gui.set_position(stars["panel_stars"], pos)
        gui.set_enabled(stars["panel_stars"], true)

        local text_result = gui.clone(gui.get_node("text_result"))
        local pos = gui.get_position(text_result)
        pos.y = pos.y - 90 * (index - 1)
        gui.set_position(text_result, pos)
        gui.set_enabled(text_result, true)

        local icon = result.cyclist.image
        if result.fun <= 45 then
            icon = icon .. "_2"
        end
        gui.play_flipbook(gui.get_node("icon_cyclist"), result.cyclist.image)
        local icon = gui.clone_tree(gui.get_node("icon_frame"))
        local pos = gui.get_position(icon["icon_frame"])
        pos.y = pos.y - 90 * (index - 1)
        gui.set_position(icon["icon_frame"], pos)
        gui.set_enabled(icon["icon_frame"], true)
    end

    gui.set_text(gui.get_node("text_result"), "")
    gui.set_text(gui.get_node("text_review"), "That was the last rider!\nThank you for playing :)")
    gui.set_enabled(self.button_next_node, false)
end

-- TODO: show all cyclist on final screen
local function process_ride(self)
    local result = ride_service.execute()
    
    gui.set_enabled(gui.get_node("icon_frame"), true)

    local icon = cyclist_service.get_cyclist().image
    if result.fun <= 45 then
        icon = icon .. "_2"
    end
    gui.play_flipbook(gui.get_node("icon_cyclist"), icon)

    show_stars(self, result)
    gui.set_text(gui.get_node("text_review"), result.review)

    local next = cyclist_service.next_cyclist()

    gui.set_enabled(self.button_next_node, true)
    self.druid:new_button("button_next/button", function()
        msg.post(msg.url("bike", "/bike", "bike_controller"), hash("play_select"))
        if next then
            monarch.post("bike", hash("reset_bike"))
            monarch.back()
        else
            show_all_results(self)
        end
    end)
end

local function process_loader(self)
    gui.set_enabled(gui.get_node("icon_frame"), false)
    gui.set_enabled(gui.get_node("panel_stars"), false)
    gui.set_enabled(gui.get_node("text_result"), false)
    
    gui.set_position(gui.get_node("icon_bicyle"), vmath.vector3(-200, 0, 0))
    gui.set_size(gui.get_node("icon_loader"), vmath.vector3(16, 16, 0))

    gui.set_enabled(self.panel_loader, true)

    gui.animate(gui.get_node("icon_bicyle"), "position.x", 200, gui.EASING_INSINE, 1.1)
    gui.animate(gui.get_node("icon_loader"), "size.x", 420, gui.EASING_INSINE, 1.1, 0, function()
        gui.set_enabled(self.panel_loader, false)

        gui.set_enabled(gui.get_node("icon_frame"), true)
        gui.set_enabled(gui.get_node("panel_stars"), true)
        gui.set_enabled(gui.get_node("text_result"), true)
        
        process_ride(self)
    end)
end

function init(self)
    gui.set_render_order(12)

    self.druid = druid.new(self)

    self.button_back_node = gui.get_node("button_back/button")
    self.button_next_node = gui.get_node("button_next/button")
    gui.set_enabled(self.button_next_node, false)
    gui.set_enabled(self.button_back_node, false)

    self.panel_loader = gui.get_node("panel_loader")
    gui.set_enabled(self.panel_loader, false)
    
    if route_service.selected > 0 then
        process_loader(self)
    else
        gui.set_enabled(gui.get_node("icon_frame"), false)
        gui.set_enabled(gui.get_node("panel_stars"), false)

        gui.set_text(gui.get_node("text_result"), "")
        gui.set_text(gui.get_node("text_review"), "Select a Route")

        gui.set_enabled(self.button_back_node, true)
        self.druid:new_button("button_back/button", function()
            msg.post(msg.url("bike", "/bike", "bike_controller"), hash("play_select"))
            monarch.back()
        end)
    end

    msg.post(msg.url("bike", "/bike", "bike_controller"), hash("play_open"))
end

function final(self)
    self.druid:final()
end

function update(self, dt)
end

function on_message(self, message_id, message, sender)
    monarch.on_message(message_id, message, sender)
end

function on_input(self, action_id, action)
    return self.druid:on_input(action_id, action)
end
