local monarch = require "monarch.monarch"
local transitions = require "monarch.transitions.gui"
local route_service = require "main.model.route"

local druid = require "druid.druid"
local RouteComponent = require "gui.template.route_component"

local function on_button_click(self, button)
    -- Since we change data of other records, we need to change raw data and change state of
    -- created components
    local data = self.data_list:get_data()
    for _, entry in pairs(data) do
        entry.is_checked = false
    end

    -- This is way to access all current created DataList components
    local components = self.data_list:get_created_components()
    for _, component in pairs(components) do
        component:set_checked(component == button)
    end

    local button_data = button:get_data()
    route_service.select_route(button_data.index)
end

local function create_element(self, data)
    local nodes = gui.clone_tree(self.prefab)
    -- Create custom component to pass it to DataList
    local route = self.druid:new(RouteComponent, "route_component", nodes)
    -- Prefab is disabled, so need to enable it for new component
    gui.set_enabled(route.root, true)
    route:set_data(data)
    route:set_click_zone(self.scroll.view_node)
    route.on_click:subscribe(on_button_click, self)

    return route.root, route
end

function init(self)
    gui.set_render_order(12)

    self.druid = druid.new(self)

    self.prefab = gui.get_node("route_component/root")
    gui.set_enabled(self.prefab, false)

    self.scroll = self.druid:new_scroll("data_list_view", "data_list_content")
    self.scroll:set_horizontal_scroll(false)
    self.grid = self.druid:new_static_grid("data_list_content", self.prefab, 1)
    self.data_list = self.druid:new_data_list(self.scroll, self.grid, create_element)
    self.scroll.style.WHEEL_SCROLL_SPEED = 20
    self.scroll.style.WHEEL_SCROLL_INVERTED = true

    self.data = route_service.data
    self.data_list:set_data(self.data)

    self.druid:new_button("button_ok/button", function()
        monarch.post("bike", hash("show_finish"))
        msg.post(msg.url("bike", "/bike", "bike_controller"), hash("play_select"))
        monarch.back()
    end)

    local transition = transitions.create()
        .show_in(gui.get_node("W_Anchor"), transitions.slide_in_left, gui.EASING_LINEAR, 0.5, 0)
        .show_out(gui.get_node("W_Anchor"), transitions.slide_out_left, gui.EASING_LINEAR, 0.5, 0)
        .back_in(gui.get_node("W_Anchor"), transitions.slide_in_left, gui.EASING_LINEAR, 0.5, 0)
        .back_out(gui.get_node("W_Anchor"), transitions.slide_out_left, gui.EASING_LINEAR, 0.5, 0)

    monarch.on_transition("routes", transition)

    msg.post(msg.url("bike", "/bike", "bike_controller"), hash("play_open"))
end

function final(self)
    self.druid:final()
end

function update(self, dt)
    self.druid:update(dt)
end

function on_message(self, message_id, message, sender)
    self.druid:on_message(message_id, message, sender)
    monarch.on_message(message_id, message, sender)
end

function on_input(self, action_id, action)
    return self.druid:on_input(action_id, action)
end