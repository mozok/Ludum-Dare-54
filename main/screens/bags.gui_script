local monarch = require "monarch.monarch"
local transitions = require "monarch.transitions.gui"
local bag_service = require "main.model.bag"
local item_service = require "main.model.item"
local druid = require "druid.druid"
local BagComponent = require "gui.template.bag"

local function on_button_click(self, button)
    -- Since we change data of other records, we need to change raw data and change state of
    -- created components
    -- local data = self.data_list:get_data()
    -- for _, entry in pairs(data) do
    --     entry.is_checked = false
    -- end

    -- This is way to access all current created DataList components
    -- local components = self.data_list:get_created_components()
    -- for _, component in pairs(components) do
    --     if component == button then
    --         component:set_checked(not button:get_data().is_used)
    --     end
    -- end

    local button_data = button:get_data()

    if button_data.is_used then
        bag_service.remove_used(button_data.index)
        button_data.is_used = false
    elseif button_data.require_item then
        if button_data.buy_enabled then
            bag_service.add_used(button_data.index)
            button_data.is_used = true
        end
    else
        bag_service.add_used(button_data.index)
        button_data.is_used = true
    end


    
    button:set_checked(button_data.is_used)
end

local function create_element(self, data)
    local nodes = gui.clone_tree(self.prefab)
    -- Create custom component to pass it to DataList
    local bag = self.druid:new(BagComponent, "bag_component", nodes)
    -- Prefab is disabled, so need to enable it for new component
    gui.set_enabled(bag.root, true)
    bag:set_data(data)
    bag:set_click_zone(self.scroll.view_node)
    bag.on_click:subscribe(on_button_click, self)

    return bag.root, bag
end


function init(self)
    gui.set_render_order(12)
    
    self.druid = druid.new(self)
    
    self.prefab = gui.get_node("bag_component/root")
    gui.set_enabled(self.prefab, false)

    self.scroll = self.druid:new_scroll("data_list_view", "data_list_content")
    self.scroll:set_horizontal_scroll(false)
    self.grid = self.druid:new_static_grid("data_list_content", self.prefab, 1)
    self.data_list = self.druid:new_data_list(self.scroll, self.grid, create_element)

    self.data = bag_service.data
    for _, bag in pairs(self.data) do
        if bag.require_item then
            local item = item_service.get_item(bag.require_item)
            bag.require_item_name = item.name
            bag.buy_enabled = item.is_used
        end
    end
    
    self.data_list:set_data(self.data)

    self.druid:new_button("button_ok/button", function()
        monarch.back()
    end)

    local transition = transitions.create()
        .show_in(gui.get_node("E_Anchor"), transitions.slide_in_right, gui.EASING_LINEAR, 0.5, 0)
        .show_out(gui.get_node("E_Anchor"), transitions.slide_out_right, gui.EASING_LINEAR, 0.5, 0)
        .back_in(gui.get_node("E_Anchor"), transitions.slide_in_right, gui.EASING_LINEAR, 0.5, 0)
        .back_out(gui.get_node("E_Anchor"), transitions.slide_out_right, gui.EASING_LINEAR, 0.5, 0)

    monarch.on_transition("bags", transition)
end

function final(self)
    self.druid:final()
end

function update(self, dt)
    self.druid:update(dt)
end

function on_message(self, message_id, message, sender)
    self.druid:on_message(message_id, message, sender)
    monarch.on_message(message_id, message, sender)
end

function on_input(self, action_id, action)
    return self.druid:on_input(action_id, action)
end