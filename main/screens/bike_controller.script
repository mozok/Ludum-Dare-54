local broadcast = require "ludobits.m.broadcast"
local bike_service = require "main.model.bike"
local route_service = require "main.model.route"
local item_service = require "main.model.item"
local bag_service = require "main.model.bag"
local monarch = require "monarch.monarch"

local all_bag_ids = { "/frame", "/rear-rack", "/stem", "/handlebar", "/seat" }
local all_mounted_id = { "/rack-rear" }

local function disable_objects(object_list)
	for _, id in pairs(object_list) do
		msg.post(id, "disable")
	end
end

function init(self)
	disable_objects(all_bag_ids)
	disable_objects(all_mounted_id)

	msg.post("/go#monarch", hash("set_volume"), { volume = bike_service.volume, max_volume = bike_service.max_volume })
	msg.post("/go#monarch", hash("set_weight"), { weight = bike_service.weight })
	msg.post("/go#monarch", hash("set_cost"), { cost = bike_service.cost })

	broadcast.register("add_bag")
	broadcast.register("remove_bag")

	broadcast.register("add_item")
	broadcast.register("remove_item")
end

function final(self)
	broadcast.unregister("add_bag")
	broadcast.unregister("remove_bag")
	broadcast.unregister("add_item")
	broadcast.unregister("remove_item")
end

local function add_bag(self, data)
	msg.post(data.position, "enable")
	msg.post(data.position .. "#sprite", "play_animation", { id = data.image })

	bike_service.max_volume = bike_service.max_volume + data.volume
	msg.post("/go#monarch", hash("set_volume"), { volume = bike_service.volume, max_volume = bike_service.max_volume })

	bike_service.cost = bike_service.cost + data.price
	msg.post("/go#monarch", hash("set_cost"), { cost = bike_service.cost })
end

local function remove_bag(self, data)
	msg.post(data.position, "disable")

	bike_service.max_volume = bike_service.max_volume - data.volume
	msg.post("/go#monarch", hash("set_volume"), { volume = bike_service.volume, max_volume = bike_service.max_volume })

	bike_service.cost = bike_service.cost - data.price
	msg.post("/go#monarch", hash("set_cost"), { cost = bike_service.cost })
end

local function add_item(self, data)
	if data.type == "mount-point" and go.exists(data.position) then
		msg.post(data.position, "enable")
		msg.post(data.position .. "#sprite", "play_animation", { id = data.image })
	end

	bike_service.volume = bike_service.volume + data.volume
	msg.post("/go#monarch", hash("set_volume"), { volume = bike_service.volume, max_volume = bike_service.max_volume })

	bike_service.cost = bike_service.cost + data.price
	msg.post("/go#monarch", hash("set_cost"), { cost = bike_service.cost })
end

local function remove_item(self, data)
	if data.type == "mount-point" and go.exists(data.position) then
		msg.post(data.position, "disable")
	end

	bike_service.volume = bike_service.volume - data.volume
	msg.post("/go#monarch", hash("set_volume"), { volume = bike_service.volume, max_volume = bike_service.max_volume })

	bike_service.cost = bike_service.cost - data.price
	msg.post("/go#monarch", hash("set_cost"), { cost = bike_service.cost })
end

local function reset_bike(self)
	route_service.select_route(0)
	item_service.reset()
	bag_service.reset()

	disable_objects(all_bag_ids)
	disable_objects(all_mounted_id)

	msg.post("#", hash("reset_bike_defaults"))

	monarch.show("cyclist")
end

function on_message(self, message_id, message, sender)
	if message_id == hash("add_bag") then
		add_bag(self, message.data)
	elseif message_id == hash("remove_bag") then
		remove_bag(self, message.data)
	elseif message_id == hash("add_item") then
		add_item(self, message.data)
	elseif message_id == hash("remove_item") then
		remove_item(self, message.data)
	elseif message_id == hash("reset_bike") then
		reset_bike(self)
	elseif message_id == hash("reset_bike_defaults") then
		bike_service.reset_default_values()
		msg.post("/go#monarch", hash("set_volume"), { volume = bike_service.volume, max_volume = bike_service.max_volume })
		msg.post("/go#monarch", hash("set_cost"), { cost = bike_service.cost })
		msg.post("/go#monarch", hash("set_weight"), { weight = bike_service.weight })
	elseif message_id == hash("play_select") then
		sound.play("#sound_select")
	elseif message_id == hash("play_open") then
		sound.play("#sound_open")
	elseif message_id == hash("play_checkbox") then
		sound.play("#sound_checkbox")
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end
